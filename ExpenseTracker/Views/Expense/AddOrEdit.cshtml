@model ExpenseTracker.Models.Expense

@{
    ViewData["Title"] = "Add/Edit";
}

<h4>Add/Edit</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="AddOrEdit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ExpenseId" />
            <div class="form-group">
                <label asp-for="ExpenseName" class="control-label"></label>
                <input asp-for="ExpenseName" class="form-control" />
                <span asp-validation-for="ExpenseName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Amount" class="control-label"></label>
                <input asp-for="Amount" class="form-control" />
                <span asp-validation-for="Amount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ExpenseDate" class="control-label"></label>
                <input asp-for="ExpenseDate" type="date" class="form-control" />
                <span asp-validation-for="ExpenseDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Category" class="control-label"></label>
                <input asp-for="Category" class="form-control" />
                <span asp-validation-for="Category" class="text-danger"></span>
            </div>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <input type="submit" value="Confirm" class="btn btn-primary btn-block" />
                </div>
                <div class="form-group col-md-6">
                    <a asp-action="Index" class="btn btn-secondary btn-block">Back to list</a>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        $.validator.methods.range = function (value, element, param) {
            var globalizedValue = value.replace(",", ".", "/");
            return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
        }

        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
        }

        //Format: dd.MM.yyyy
        $.validator.methods.date = function (value, element) {
            var date = value.split(".");
            return this.optional(element) || /Invalid|NaN/.test(new Date(date[2], date[1], date[0]).toString());
        }
    </script>

}
